#!/bin/bash

echo "3 + 7 = $(( 3 + 7 ))"
echo "6 - 2 = $(( 6 - 2 ))"
echo "6 * 5 = $(( 6 * 5 ))"
echo "8 / 2 = $(( 8 / 2 ))"
echo "5 ** 2 = $(( 5 ** 2 ))"
echo "(25 + 10) * 2 + 3 = $(( (25 + 10) *2 + 3 ))"

echo -e "\nხელსაწყო \"bc\" გამოყენებით:"
# | მნიშვნელობის გადაცემა
# მაგალითად ხელსაწყოს "tr" გამოყენებით, მნიშვნელობის შესაცვლელად
# tr გამოყენებით დაბეჭდოს მნიშვნელობა და გადასცეს ხელსაწყოს განსახილველად
# echo "3x" | tr 3 5
# 5x

echo -n "5 + 7 = "; echo 5 + 7 | bc
echo "8 - 1 = $(echo 8 -1 | bc)" # ბრძანების ვარიაციაში ჩასაწერად "$(ბრძანება)"
echo -n "5 * 5 = "; echo 5 \* 5 | bc # "\*" რადგან "*" ნიშნავს მიმდინარე დირექცაში არსებულს
echo -n "70 \ 10 = "; echo 70 / 10 | bc
echo -n "51.43 + 12.12 = "; echo 51.43 + 12.12 | bc
echo -n "12.13 + 54.57 = "; echo 12.13 + 54.57 | bc
echo -n "( 4 + 4 ) - 1 = "; echo \( 4 + 4 \) - 1 | bc # "\(" და არა "(" რათა არ აირიოს $BASH_ის სინტაქსი

# რატომ გამოიყენება "echo \*" ნაცვლად "echo *" ? სცადეთ თქვენსავე ტერმინალში

echo -e "\nცვლადის შეკრება":
echo -en "a = 9\nb = 5\nc = a + b\nc = "
a=9
b=5
let c=$a+$b
echo $c
